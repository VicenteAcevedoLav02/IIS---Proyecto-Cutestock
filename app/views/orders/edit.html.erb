<h1 class="text-center">Editing Order <%= @order.id %> for <%= @business.name %></h1>

<%= form_with model: @order, url: order_path(@order), local: true do |form| %>
  <div class="form-group">
    <%= form.label :name, "Order Name" %>
    <%= form.text_field :name, class: "form-control mb-3", required: true, value: @order.name %>
  </div>

  <div id="product-fields" class="mb-3">
    <% @order_quantities.each do |product_name, quantity| %>
      <div class="product-field row align-items-center mb-2">
        <div class="col-md-8">
          <label for="product_name">Product Name</label>
          <%= select_tag "product_name[]", options_from_collection_for_select(@products.uniq { |p| p.name }, :name, :name, product_name), class: "form-control", required: true %>
        </div>
        <div class="col-md-3">
          <label for="quantity">Quantity</label>
          <%= text_field_tag "quantity[]", quantity, class: "form-control mb-3", size: 5, required: true, min: 1 %>
        </div>
        <div class="col-md-1 text-center">
          <button type="button" class="btn btn-danger remove-product">&#10006;</button>
        </div>
      </div>
    <% end %>
  </div>

  <button type="button" class="btn btn-dark" id="add-product">Add Product</button>
  <br><br>
  <%= form.submit "Update Order", class: "btn btn-dark" %>
<% end %>

<script>
  function updateRemoveButtonState() {
    const removeButtons = document.querySelectorAll(".remove-product");
    const productFields = document.querySelectorAll(".product-field");

    // Enable/disable remove buttons based on the number of product fields
    removeButtons.forEach(button => {
      const productFieldCount = productFields.length;
      button.disabled = productFieldCount <= 1;  // Disable remove button if only one field is left
    });
  }

  // Event listener for the 'Add Product' button
  document.getElementById("add-product").addEventListener("click", function() {
    const productFields = document.getElementById("product-fields");
    const newProductField = document.createElement("div");
    newProductField.className = "product-field row align-items-center mb-2";
    newProductField.innerHTML = `
      <div class="col-md-8">
        <label for="product_name">Product Name</label>
        <select name="product_name[]" class="form-control" required>
          <option value="">Select a product</option>
          <%= options_for_select(@products.uniq { |p| p.name }.map { |p| [p.name, p.name] }) %>
        </select>
      </div>
      <div class="col-md-3">
        <label for="quantity">Quantity</label>
        <input type="number" name="quantity[]" class="form-control" size="5" min="1" required>
      </div>
      <div class="col-md-1 text-center">
        <button type="button" class="btn btn-danger remove-product">&#10006;</button>
      </div>
    `;
    productFields.appendChild(newProductField);
    updateRemoveButtonState(); // Update the state of remove buttons
  });

  // Event listener for removing a product field
  document.getElementById("product-fields").addEventListener("click", function(event) {
    if (event.target.classList.contains("remove-product")) {
      event.target.closest(".product-field").remove();
      updateRemoveButtonState(); // Update the state of remove buttons after removing a product
    }
  });

  // Check remove button state on page load
  document.addEventListener("DOMContentLoaded", updateRemoveButtonState);
</script>
